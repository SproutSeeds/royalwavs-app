// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("fan")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  songs       Song[]
  investments Investment[]
  payouts     Payout[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Song {
  id               String   @id @default(cuid())
  title            String
  artistName       String
  albumArtUrl      String?
  audioFileUrl     String?
  audioFileName    String?
  audioFileSize    Int?
  audioMimeType    String?
  totalRoyaltyPool Float
  monthlyRevenue   Float    @default(0)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  artistId String
  artist   User   @relation(fields: [artistId], references: [id])

  investments Investment[]
  payouts     Payout[]

  @@map("songs")
}

model Investment {
  id                String   @id @default(cuid())
  amountInvested    Float
  royaltyPercentage Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  songId String
  song   Song   @relation(fields: [songId], references: [id])

  @@unique([songId, userId])
  @@map("investments")
}

model Payout {
  id        String   @id @default(cuid())
  amount    Float
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  songId String
  song   Song   @relation(fields: [songId], references: [id])

  @@map("payouts")
}
